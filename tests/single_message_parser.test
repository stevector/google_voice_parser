<?php

/**
 * @file
 * Tests of parser.
 */

require '../vendor/autoload.php';

// @todo, organize code into classes.
require '../index.php';



use Symfony\Component\DomCrawler\Crawler;


/**
 * Unit tests for csv functions.
 *
 * @todo, these functions might belong in there own class totally independent
 * of Drupal. These tests could then be done through PHPUnit.
 */
class GoogleVoiceParserUnitTests extends PHPUnit_Framework_TestCase  {

  /**
   * Get a the file path of a test csv file.
   */
  protected function getTestHtmlFilePath($name) {
    // @todo, eventually there may need to be a more robust way of going from
    // a name variable to a full path.
    return  'test_html/Test Sender - Text - 2013-09-27T11_26_44Z.html';
  }

  public function dataProviderTestOfSingleFile() {
    return array(
//        array(
//         'a',
//         'b',
//        )

      array(
        $this->getTestHtmlFilePath('todo'),
        $this->getExpectedSingleResultsArray(),
      )
    );
  }

  /**
   *
   * @return array
   *   An array of arrays to pass to testOfSingleMessageParser().
   */
  public function dataProviderTestOfSingleMessageParser() {

     $markup = '
      <div class="message">
        <abbr class="dt" title="2013-09-27T11:26:44.258Z">
          Sep 27, 2013, 11:26:44 AM GMT
        </abbr>:
        <cite class="sender vcard">
          <a class="tel" href="tel:+14145551234">
            <span class="fn">Test Sender</span>
          </a>
        </cite>:
        <q>Late start, more like 8 am</q>
      </div>';

    $expected_array = array(
      'time' => '2013-09-27T11:26:44.258Z',
      'sender_number' => 'tel:+14145551234',
      'sender_name' => 'Test Sender',
      'message' => 'Late start, more like 8 am',
    );

    return array(
      array(
        $markup,
        $expected_array,
      ),
    );
  }

  /**
   * Unit test of field_creator_csvToArray().
   *
   * @dataProvider dataProviderTestOfSingleMessageParser
   */
  public function testOfSingleMessageParser($source, $expected_array) {

    $derived_array = singleMessageParser($source);

    $this->assertTrue($expected_array === $derived_array, 'The expected array is identical to the derived array');
    // verify that a small change to a value in the derived_array results
    // in un-identical arrays.
    $derived_array['message'] .= ' ';
    $this->assertTrue($expected_array !== $derived_array, 'The expected array is not identical to the derived array');
  }

  /**
   * Unit test of field_creator_csvToArray().
   *
   * @dataProvider dataProviderTestOfSingleFile
   */
  public function testOfSingleFile($expected_html_path, $expected_array) {

    $contents = file_get_contents($expected_html_path);

    $crawler = new Crawler($contents);


    $message = $crawler->filter('div.message')->each(function ($node, $i) {
       return singleMessageParser($node);
    });



    print_r($message);

    $this->assertTRUE('a' == 'a', 'test message');
  }

}
